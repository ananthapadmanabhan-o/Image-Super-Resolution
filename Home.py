import streamlit as st


st.set_page_config(
    page_title="Home",
    layout="centered",
    page_icon="üè†Ô∏é",
    initial_sidebar_state="expanded",
)


st.header("Image Super Resolution GAN", divider="rainbow")


st.image("assets/srgan_cover.png", use_column_width=True)


# st.image('assets/imgs/autoencoder.png',use_column_width=True)


st.markdown(
    """
    ### Introduction to GAN Architecture
    """
)

st.image('assets/gan_block.ppm',use_column_width=True)

gan_body = """

A Generative Adversarial Network (GAN) is a type of deep learning model that consists of two neural networks: a generator and a discriminator. These two networks are trained simultaneously in a process known as adversarial training:

- ### Generator: 
    - The generator creates fake data (e.g., images) from random noise. It tries to produce outputs that are indistinguishable from real data.

- ### Discriminator: 
    - The discriminator evaluates the data, distinguishing between real data and the fake data produced by the generator. It gives feedback to the generator on how well it's doing.

The two networks are in constant competition: the generator improves in creating realistic data, and the discriminator gets better at detecting fakes. This competition drives both networks to improve over time, eventually resulting in highly realistic data generated by the GAN.

"""
st.markdown(gan_body)


st.markdown(
    '''
    ### Super-Resolution Generative Adversarial Network (SRGAN)

'''
)

st.image('assets/srgan_block.png')

srgan_body = """


SRGAN is an extension of GANs specifically designed for the task of image super-resolution, which involves enhancing the resolution of an image from low resolution (LR) to high resolution (HR). The SRGAN architecture includes the following key components:

- ### Generator (Super-Resolution Network): 
    - The generator in SRGAN takes a low-resolution image as input and generates a high-resolution image. This network is typically composed of convolutional layers, and in SRGAN, it includes residual blocks to better capture fine details.

- ### Discriminator: 
    - The discriminator in SRGAN is trained to differentiate between real high-resolution images and the high-resolution images generated by the generator. This helps the generator learn to produce more photorealistic images.

- ### Perceptual Loss: 
    - In addition to the traditional pixel-wise loss (e.g., mean squared error), SRGAN uses a perceptual loss that measures the difference between high-level features of the generated and real images as extracted by a pre-trained network (usually a VGG network). This helps the generator produce images that are visually more appealing and closer to human perception.

SRGAN is particularly powerful for tasks where image quality and fine details are critical, such as medical imaging, satellite imaging, and digital content creation



This project is an implementation of the paper [Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network](https://arxiv.org/abs/1609.04802v5). The model is implemented in pytorch and mlflow is used for experimentation

- GitHub link [Project-Repo](https://github.com/ananthapadmanabhan-o/Image-Super-Resolution)

- Data set linke [link](https://data.vision.ee.ethz.ch/cvl/DIV2K/)


"""


st.markdown(srgan_body)


st.markdown(
    '''
### MlFow For Experimentations

MLflow is an open-source platform for managing machine learning lifecycle, model tracking. In this project mlflow is used to track model experimentations and model metrics.
'''
)
st.image('assets/mlflow.png')

